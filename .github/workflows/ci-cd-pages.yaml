# Name of your workflow
name: Deploy Static Website to GitHub Pages

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write      # Required to deploy to Pages
  id-token: write   # Required for OIDC token generation

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Define the deployment job
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Output the URL after deployment
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out your repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure GitHub Pages
      # This action sets up the environment for the deployment action
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Step 3: Upload the static site artifact
      # This action packages your static files (index.html, css, js, images) for deployment
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload files from the root directory (where index.html is)
          path: '.'

      # Step 4: Deploy to GitHub Pages
      # This action takes the uploaded artifact and deploys it
      - name: Deploy to GitHub Pages
        id: deployment # Give the step an ID to reference its output (the URL)
        uses: actions/deploy-pages@v4
